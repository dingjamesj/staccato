# Fetches Spotify information

import platform

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

import yt_dlp

SETTINGS_FILE_LOCATION = "staccatoapikeys.txt"
NUM_ACCEPTED_SEARCHES = 3

api_keys: list[str] = []
market: str = ""

def read_api_settings():
    try:
        file = open(SETTINGS_FILE_LOCATION, "r")
        api_keys.clear()
        api_keys.append(file.readline().strip())
        api_keys.append(file.readline().strip())
        market = file.readline().strip()
        file.close()
    except IOError as e:
        print(e)

def change_api_settings(client_id: str, client_secret: str, market: str):
    try:
        file = open(SETTINGS_FILE_LOCATION, "w")
        if platform.system().lower() == "windows":
            file.writelines(f"{client_id}\n", f"{client_secret}\n", f"{market}")
        else:
            file.writelines(f"{client_id}\n", f"{client_secret}\n", f"{market}")
        file.close()
    except IOError as e:
        print(e)

def get_spotify_playlist_tracks(spotify_id: str) -> list[dict]:
    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=api_keys[0], client_secret=api_keys[1]))
    return sp.playlist_tracks(playlist_id=spotify_id, market=market)["items"]

def get_spotify_track(spotify_id: str) -> dict:
    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=api_keys[0], client_secret=api_keys[1]))
    return sp.track(track_id=spotify_id, market=market)

def search_youtube(title: str, artists: str) -> str:
    # Search for the top few videos---searching with "{Title} {1st artist}"
    # e.g. "nÃ©e-nah 21 Savage"
    ydl_opts: dict = {
        "ignoreerrors": True
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info: dict = ydl.extract_info(url=f"ytsearch{NUM_ACCEPTED_SEARCHES}:{title} {artists}", download=False)
    search_results: list[dict] = info["entries"]
    # Find the ID of the highest-scoring video
    index: int = 0
    largest_score: int = -9999999
    id_with_largest_score: str = ""
    for search_result in search_results:
        if search_result is None:
            index = index + 1
            continue
        score: int = calculate_video_score(search_result, index, title, artists)
        if score > largest_score:
            largest_score = score
            id_with_largest_score = search_result["id"]
    # Return
    return f"https://www.youtube.com/watch?v={id_with_largest_score}"

# How well a video's info matches up with the target track information.
def calculate_video_score(search_result: dict, index: int, target_title: str, target_artists: str) -> int:
    video_title: str = search_result["title"].lower()
    video_channel: str = search_result["channel"].lower()
    video_desc: str = search_result["description"].lower()
    target_title = target_title.lower()
    target_artists = target_artists.lower()
    score: int = 0

    if target_title not in video_title:
        score = score - 2
    
    if target_artists in video_title:
        score = score + 1
    
    if "hour" in video_title or "loop" in video_title or "edit" in video_title or "live" in video_title or "reverb" in video_title or "sped-up" in video_title or "sped up" in video_title or "slowed" in video_title or "remix" in video_title or "cover" in video_title or "mtv" in video_title:
        score = score - 3
    
    if "audio" in video_title or "lyrics" in video_title:
        score = score + 3
    
    if index == 0:
        score = score + 1
    
    if target_artists in video_channel:
        score = score + 1
    
    if "auto-generated by youtube" in video_desc:
        score = score + 2

    return score

if __name__ == "__main__":
    # tracks = None
    # tracks = get_spotify_playlist_tracks("https://open.spotify.com/playlist/1zUUwGZh02drh2M13yNcVD?si=fe3a24a9e483426b")
    # print(tracks)
    # print("\n")
    # print(type(tracks))
    # print(type(tracks[0]))

    # tracks_java_data = send_tracks_to_java("https://open.spotify.com/playlist/1zUUwGZh02drh2M13yNcVD?si=fe3a24a9e483426b")
    # for data in tracks_java_data:
    #     print(data["title"])
    #     print(data["artists"])
    #     print(data["album"])
    #     print(data["artworkURL"])
    #     print(data["youtubeID"])
    #     print()
    
    # print(send_tracks_to_java("https://open.spotify.com/playlist/1MBIdnT23Xujh3iHDAURfB?si=c3ad19f5390b4aa1"))
    # print(send_tracks_to_java("https://open.spotify.com/track/5SIvP6TdWc9DNvKbENjnYc?si=1da78ef172254cf1", True))

    read_api_settings()
    print(api_keys)
    pass
